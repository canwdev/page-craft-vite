[
  {
    "name": "自定义文本转换",
    "code": "const { addPlugin, copy } = window.$qlUtils\r\n\r\nconst labelArr = [\r\n  {\r\n    reg: /^阿拉伯语：|^Arabic:|^ar:/,\r\n    name: 'عربى',\r\n    iso: 'ar-AE',\r\n    mLocale: 'ar',\r\n  },\r\n  {\r\n    reg: /^德：|^德语：|^German:|^de:/,\r\n    name: 'Deutsch',\r\n    iso: 'de-DE',\r\n    mLocale: 'de',\r\n  },\r\n  {\r\n    reg: /^英：|^英语：|^English:|^en:/,\r\n    name: 'English',\r\n    iso: 'en-US',\r\n    mLocale: 'en',\r\n  },\r\n  {\r\n    reg: /^西：|^西语：|^西班牙语：|^Spanish:|^es:/,\r\n    name: 'Español',\r\n    iso: 'es-ES',\r\n    mLocale: 'es',\r\n  },\r\n  {\r\n    reg: /^法：|^法语：|^French:|^fr:/,\r\n    name: 'Français',\r\n    iso: 'fr-FR',\r\n    mLocale: 'fr',\r\n  },\r\n  {\r\n    reg: /^意：|^意大利语：|^Italian:|^it:/,\r\n    name: 'Italiano',\r\n    iso: 'it-IT',\r\n    mLocale: 'it',\r\n  },\r\n  {\r\n    reg: /^日：|^日语：|^Japanese:|^jp:/,\r\n    name: '日本語',\r\n    iso: 'ja-JP',\r\n    mLocale: 'jp',\r\n  },\r\n  {\r\n    reg: /^韩：|^韩语：|^Korean:|^kr:/,\r\n    name: '한국어',\r\n    iso: 'ko-KR',\r\n    mLocale: 'kr',\r\n  },\r\n  {\r\n    reg: /^简：|^中文：|^简中：|^Chinese Simplified:/,\r\n    name: '简体中文',\r\n    iso: 'zh-CN',\r\n    mLocale: 'cn',\r\n  },\r\n  {\r\n    reg: /^繁：|^繁体中文：|^繁中：|^Traditional Chinese:/,\r\n    name: '繁體中文',\r\n    iso: 'zh-TW',\r\n    mLocale: 'zh',\r\n  },\r\n]\r\nfunction getLocaleLabel(rawText) {\r\n  if (!rawText) {\r\n    return null\r\n  }\r\n  for (let i = 0; i < labelArr.length; i++) {\r\n    const { reg, iso } = labelArr[i]\r\n    const result = reg.exec(rawText)\r\n    // console.log(result)\r\n    if (result) {\r\n      return {\r\n        label: iso,\r\n        value: rawText.slice(result[0].length, rawText.length).trim(),\r\n      }\r\n    }\r\n  }\r\n  return rawText\r\n}\r\nfunction convertText(text) {\r\n  const lines = text.trim().split('\\n')\r\n  return lines\r\n    .map((line) => {\r\n      return getLocaleLabel(line)\r\n    })\r\n    .filter(Boolean)\r\n}\r\n\r\nfunction convertObject(obj) {\r\n  try {\r\n\r\n    const result = {}\r\n    for (const key in obj) {\r\n      let value = obj[key] || ''\r\n\r\n      if (typeof value !== 'string') {\r\n        throw new Error('输入格式错误，请打开控制台检查')\r\n      }\r\n\r\n      let locale = key\r\n      const f = labelArr.find((l) => l.name === key)\r\n      if (f) {\r\n        locale = f.mLocale\r\n      }\r\n      /**\r\n       * 删除版本号的说明（用于latest.json的多语言内容）\r\n       * 示例输入：\r\n       * v8.2.3.1 Updates<br><br>1. Support RTSP\r\n       * 示例输出：\r\n       * 1. Support RTSP\r\n       */\r\n      value = value.replace(/v\\d+\\.\\d+\\.\\d+\\.\\d+\\s.+\\<br\\>\\<br\\>/, '');\r\n      result[locale] = value\r\n    }\r\n    return result\r\n  } catch (e) {\r\n    console.error(e)\r\n    window.$message.error(e.message)\r\n  }\r\n}\r\n\r\naddPlugin((valRef) => {\r\n  return {\r\n    html: '💱 <span style=\"color: #00a6ed\">自定义文本转换</span>',\r\n    children: [\r\n      {\r\n        label: '⌨️ 多语言多行文本 -> JSON数组(ISO)',\r\n        props: {\r\n          onClick: async () => {\r\n\r\n            if (!valRef.value) {\r\n              window.$message.warning('请打开控制台，查看示例')\r\n              console.log(`用途：将粘贴的GPT生成的翻译文案 转换为 标准化(ISO)JSON数组。\r\n\r\n示例输入：\r\nEnglish: Supports Windows® 10 and above, macOS® 11 and above.\r\nSpanish: Compatible con Windows® 10 y versiones superiores, macOS® 11 y versiones superiores.\r\nJapanese: Windows® 10 およびそれ以降、macOS® 11 およびそれ以降に対応しています。\r\n\r\n示例输出：\r\n[\r\n  {\r\n    \"label\": \"en-US\",\r\n    \"value\": \"Supports Windows® 10 and above, macOS® 11 and above.\"\r\n  },\r\n  {\r\n    \"label\": \"es-ES\",\r\n    \"value\": \"Compatible con Windows® 10 y versiones superiores, macOS® 11 y versiones superiores.\"\r\n  },\r\n  {\r\n    \"label\": \"ja-JP\",\r\n    \"value\": \"Windows® 10 およびそれ以降、macOS® 11 およびそれ以降に対応しています。\"\r\n  }\r\n]\r\n`)\r\n              return\r\n            }\r\n\r\n            await copy(convertText(valRef.value), true)\r\n          },\r\n        },\r\n      },\r\n      {\r\n        label: '⌨️ 多语言JSON对象 -> JSON对象(locale)',\r\n        props: {\r\n          onClick: async () => {\r\n\r\n            if (!valRef.value) {\r\n              window.$message.warning('请打开控制台，查看示例')\r\n              console.log(`用途：批量格式化excel的更新内容到latest.json 。\r\n\r\n示例输入：\r\n{\r\n  \"English\": \"v8.2.3.1 Updates<br><br>1. Support RTSP<br>2. Add album functionality<br>3. Adapt for OBSBOT Tail Air<br>4. Upgrade to NDI 6\",\r\n  \"简体中文\": \"v8.2.3.1 更新内容<br><br>1. 支持 RTSP<br>2. 新增相册功能<br>3. 适配寻影 Tail Air<br>4. 升级至 NDI 6\",\r\n  \"日本語\": \"v8.2.3.1 アップデートについて<br><br>1. RTSPサポートを追加する<br>2. アルバム機能を追加する<br>3. OBSBOT Tail Airに対応する<br>4. NDI 6にアップグレードする\"\r\n}\r\n\r\n示例输出：\r\n{\r\n  \"en\": \"1. Support RTSP<br>2. Add album functionality<br>3. Adapt for OBSBOT Tail Air<br>4. Upgrade to NDI 6\",\r\n  \"cn\": \"1. 支持 RTSP<br>2. 新增相册功能<br>3. 适配寻影 Tail Air<br>4. 升级至 NDI 6\",\r\n  \"jp\": \"1. RTSPサポートを追加する<br>2. アルバム機能を追加する<br>3. OBSBOT Tail Airに対応する<br>4. NDI 6にアップグレードする\"\r\n}\r\n`)\r\n              return\r\n            }\r\n\r\n\r\n            await copy(convertObject(JSON.parse(valRef.value.trim())), true)\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  }\r\n}, {\r\n  isStaticPlugin: true,\r\n})\r\n"
  },
  {
    "name": "时间管理大师",
    "code": "const { addPlugin, copy, computed, moment } = window.$qlUtils\n\nconst isTimestamp = (val) => {\n  val = Number(val)\n  const d = new Date(val)\n  if (d.getTime() > 0) {\n    return d\n  }\n  return false\n}\n\naddPlugin((valRef) => {\n  return {\n    html: '⌚ <span style=\"color: #5235a6\">时间管理大师</span>',\n    children: () => {\n      return computed(() => {\n        const fmt = valRef.value || 'YYYY-MM-DD HH:mm:ss'\n        const ts = Date.now()\n        const formattedTime = moment(ts).format(fmt)\n\n        let timestampToDisplay\n\n        const tsDate = isTimestamp(valRef.value)\n        if (tsDate) {\n          const display = moment(tsDate).format('YYYY-MM-DD HH:mm:ss')\n          timestampToDisplay = {\n            label: `📋 时间戳转时间展示\\n结果: ${display}`,\n            props: { onClick: () => copy(display, true) },\n          }\n        } else {\n          timestampToDisplay = {\n            label: `📋 格式化时间 (格式: ${fmt})\\n结果: ${formattedTime}`,\n\n            props: {\n              onClick: async () => {\n                await copy(formattedTime, true)\n              },\n            },\n          }\n        }\n\n        return [\n          timestampToDisplay,\n          !valRef.value ?\n            {\n              label: `📋 当前时间戳\\n${ts}`,\n              props: {\n                onClick: async () => {\n                  await copy(ts, true)\n                },\n              },\n            } :\n            {\n              label: `📋 转换输入值为时间戳`,\n              props: {\n                onClick: async () => {\n                  const result = moment(valRef.value).unix() * 1000\n                  if (!result) {\n                    window.$message.error('请输入类似于 2024-05-13 09:54:44 的值来进行转换！')\n                    return\n                  }\n                  await copy(result, true)\n                },\n              },\n            },\n        ].filter(Boolean)\n      })\n    }\n  }\n}, {\n  isStaticPlugin: true,\n})\n"
  }
]